
# Import the necessary module for GUI
Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# Function to create the authentication popup window
function Show-AuthDialog {
    $authForm = New-Object System.Windows.Forms.Form
    $authForm.Text = "Domain Authentication"
    $authForm.Size = New-Object System.Drawing.Size(300,200)
    $authForm.StartPosition = "CenterParent"

    $userLabel = New-Object System.Windows.Forms.Label
    $userLabel.Location = New-Object System.Drawing.Point(10,20)
    $userLabel.Size = New-Object System.Drawing.Size(260,20)
    $userLabel.Text = "Enter your domain username:"
    $authForm.Controls.Add($userLabel)

    $userTextBox = New-Object System.Windows.Forms.TextBox
    $userTextBox.Location = New-Object System.Drawing.Point(10,40)
    $userTextBox.Size = New-Object System.Drawing.Size(260,20)
    $authForm.Controls.Add($userTextBox)

    $passLabel = New-Object System.Windows.Forms.Label
    $passLabel.Location = New-Object System.Drawing.Point(10,70)
    $passLabel.Size = New-Object System.Drawing.Size(260,20)
    $passLabel.Text = "Enter your domain password:"
    $authForm.Controls.Add($passLabel)

    $passTextBox = New-Object System.Windows.Forms.TextBox
    $passTextBox.Location = New-Object System.Drawing.Point(10,90)
    $passTextBox.Size = New-Object System.Drawing.Size(260,20)
    $passTextBox.UseSystemPasswordChar = $true
    $authForm.Controls.Add($passTextBox)

    $okButton = New-Object System.Windows.Forms.Button
    $okButton.Location = New-Object System.Drawing.Point(10,130)
    $okButton.Size = New-Object System.Drawing.Size(120,30)
    $okButton.Text = "OK"
    $authForm.Controls.Add($okButton)

    $cancelButton = New-Object System.Windows.Forms.Button
    $cancelButton.Location = New-Object System.Drawing.Point(150,130)
    $cancelButton.Size = New-Object System.Drawing.Size(120,30)
    $cancelButton.Text = "Cancel"
    $authForm.Controls.Add($cancelButton)

    $okButton.Add_Click({
        $authForm.DialogResult = [System.Windows.Forms.DialogResult]::OK
        $authForm.Close()
    })

    $cancelButton.Add_Click({
        $authForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel
        $authForm.Close()
    })

    $authForm.AcceptButton = $okButton
    $authForm.CancelButton = $cancelButton

    $dialogResult = $authForm.ShowDialog()

    if ($dialogResult -eq [System.Windows.Forms.DialogResult]::OK) {
        return @{
            Username = $userTextBox.Text
            Password = $passTextBox.Text
        }
    } else {
        return $null
    }
}

# Function to show the server entry popup window
function Show-ServerEntryDialog {
    $serverForm = New-Object System.Windows.Forms.Form
    $serverForm.Text = "Enter Server Name"
    $serverForm.Size = New-Object System.Drawing.Size(300,150)
    $serverForm.StartPosition = "CenterParent"

    $serverLabel = New-Object System.Windows.Forms.Label
    $serverLabel.Location = New-Object System.Drawing.Point(10,20)
    $serverLabel.Size = New-Object System.Drawing.Size(260,20)
    $serverLabel.Text = "Enter server name:"
    $serverForm.Controls.Add($serverLabel)

    $serverTextBox = New-Object System.Windows.Forms.TextBox
    $serverTextBox.Location = New-Object System.Drawing.Point(10,40)
    $serverTextBox.Size = New-Object System.Drawing.Size(260,20)
    $serverForm.Controls.Add($serverTextBox)

    $okButton = New-Object System.Windows.Forms.Button
    $okButton.Location = New-Object System.Drawing.Point(10,70)
    $okButton.Size = New-Object System.Drawing.Size(120,30)
    $okButton.Text = "OK"
    $serverForm.Controls.Add($okButton)

    $cancelButton = New-Object System.Windows.Forms.Button
    $cancelButton.Location = New-Object System.Drawing.Point(150,70)
    $cancelButton.Size = New-Object System.Drawing.Size(120,30)
    $cancelButton.Text = "Cancel"
    $serverForm.Controls.Add($cancelButton)

    $okButton.Add_Click({
        $serverForm.DialogResult = [System.Windows.Forms.DialogResult]::OK
        $serverForm.Close()
    })

    $cancelButton.Add_Click({
        $serverForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel
        $serverForm.Close()
    })

    $serverForm.AcceptButton = $okButton
    $serverForm.CancelButton = $cancelButton

    $dialogResult = $serverForm.ShowDialog()

    if ($dialogResult -eq [System.Windows.Forms.DialogResult]::OK) {
        return $serverTextBox.Text
    } else {
        return $null
    }
}

# Function to create the console progress window
function Show-ProgressConsole {
    $progressForm = New-Object System.Windows.Forms.Form
    $progressForm.Text = "Progress Console"
    $progressForm.Size = New-Object System.Drawing.Size(400,300)
    $progressForm.StartPosition = "CenterParent"

    $progressTextBox = New-Object System.Windows.Forms.TextBox
    $progressTextBox.Location = New-Object System.Drawing.Point(10,10)
    $progressTextBox.Size = New-Object System.Drawing.Size(360,240)
    $progressTextBox.Multiline = $true
    $progressTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::Vertical
    $progressTextBox.ReadOnly = $true
    $progressForm.Controls.Add($progressTextBox)

    $progressForm.Show()
    return $progressTextBox
}

# Function to check if the server is reachable
function Test-ServerRestart {
    param (
        [string]$ServerName,
        [System.Management.Automation.PSCredential]$Credential
    )

    $maxRetries = 5
    $retryInterval = 30 # seconds

    for ($i = 0; $i -lt $maxRetries; $i++) {
        Start-Sleep -Seconds $retryInterval
        $pingResult = Test-Connection -ComputerName $ServerName -Count 1 -Quiet
        if ($pingResult) {
            return $true
        }
    }
    return $false
}

# Function to ping a server and display the result
function Ping-Server {
    param (
        [string]$ServerName
    )

    $pingResult = Test-Connection -ComputerName $ServerName -Count 1 -Quiet
    return $pingResult
}

# Create a new form
$form = New-Object System.Windows.Forms.Form
$form.Text = "Restart Servers"
$form.Size = New-Object System.Drawing.Size(400,650)
$form.StartPosition = "CenterScreen"

# Create a label
$label = New-Object System.Windows.Forms.Label
$label.Location = New-Object System.Drawing.Point(10,20)
$label.Size = New-Object System.Drawing.Size(260,20)
$label.Text = "Select or enter the servers to restart:"
$form.Controls.Add($label)

# Create a listbox
$listBox = New-Object System.Windows.Forms.ListBox
$listBox.Location = New-Object System.Drawing.Point(10,50)
$listBox.Size = New-Object System.Drawing.Size(260,200)
$listBox.SelectionMode = [System.Windows.Forms.SelectionMode]::MultiExtended
$form.Controls.Add($listBox)

# Create an upload button
$uploadButton = New-Object System.Windows.Forms.Button
$uploadButton.Location = New-Object System.Drawing.Point(10,270)
$uploadButton.Size = New-Object System.Drawing.Size(120,30)
$uploadButton.Text = "Upload List"
$form.Controls.Add($uploadButton)

# Create a button to add the server to the list
$addServerButton = New-Object System.Windows.Forms.Button
$addServerButton.Location = New-Object System.Drawing.Point(280,50)
$addServerButton.Size = New-Object System.Drawing.Size(100,30)
$addServerButton.Text = "Add Server"
$form.Controls.Add($addServerButton)

# Create a button to remove the selected server from the list
$removeServerButton = New-Object System.Windows.Forms.Button
$removeServerButton.Location = New-Object System.Drawing.Point(280,90)
$removeServerButton.Size = New-Object System.Drawing.Size(100,30)
$removeServerButton.Text = "Remove Server"
$form.Controls.Add($removeServerButton)

# Create a button to modify the selected server in the list
$modifyServerButton = New-Object System.Windows.Forms.Button
$modifyServerButton.Location = New-Object System.Drawing.Point(280,130)
$modifyServerButton.Size = New-Object System.Drawing.Size(100,30)
$modifyServerButton.Text = "Modify Selected Server"
$form.Controls.Add($modifyServerButton)

# Create a restart button
$restartButton = New-Object System.Windows.Forms.Button
$restartButton.Location = New-Object System.Drawing.Point(10,370)
$restartButton.Size = New-Object System.Drawing.Size(120,30)
$restartButton.Text = "Restart"
$form.Controls.Add($restartButton)

# Create a ping button
$pingButton = New-Object System.Windows.Forms.Button
$pingButton.Location = New-Object System.Drawing.Point(10,410)
$pingButton.Size = New-Object System.Drawing.Size(120,30)
$pingButton.Text = "Ping Server"
$form.Controls.Add($pingButton)

# Create a cancel button
$cancelButton = New-Object System.Windows.Forms.Button
$cancelButton.Location = New-Object System.Drawing.Point(10,450)
$cancelButton.Size = New-Object System.Drawing.Size(120,30)
$cancelButton.Text = "Cancel"
$form.Controls.Add($cancelButton)

# Define the upload button click event
$uploadButton.Add_Click({
    $openFileDialog = New-Object System.Windows.Forms.OpenFileDialog
    $openFileDialog.Filter = "Text Files (*.txt)|*.txt|All Files (*.*)|*.*"
    if ($openFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK) {
        $filePath = $openFileDialog.FileName
        $serverList = Get-Content $filePath
        $listBox.Items.Clear()
        foreach ($server in $serverList) {
            $listBox.Items.Add($server)
        }
    }
})

# Define the add server button click event
$addServerButton.Add_Click({
    $server = Show-ServerEntryDialog
    if (![string]::IsNullOrWhiteSpace($server)) {
        $listBox.Items.Add($server)
    } else {
        [System.Windows.Forms.MessageBox]::Show("Please enter a valid server name.")
    }
})

# Define the remove server button click event
$removeServerButton.Add_Click({
    $selectedItems = $listBox.SelectedItems
    for ($i = $selectedItems.Count - 1; $i -ge 0; $i--) {
        $listBox.Items.Remove($selectedItems[$i])
    }
})

# Define the modify server button click event
$modifyServerButton.Add_Click({
    $selectedItem = $listBox.SelectedItem
    if ($selectedItem) {
        $server = Show-ServerEntryDialog
        if (![string]::IsNullOrWhiteSpace($server)) {
            $listBox.Items[$listBox.Items.IndexOf($selectedItem)] = $server
        } else {
            [System.Windows.Forms.MessageBox]::Show("Please enter a valid server name.")
        }
    } else {
        [System.Windows.Forms.MessageBox]::Show("Please select a server to modify.")
    }
})

# Define the restart button click event
$restartButton.Add_Click({
    $selectedServers = $listBox.SelectedItems
    $authResult = Show-AuthDialog
    if ($authResult -ne $null) {
        $username = $authResult.Username
        $password = $authResult.Password
        if ($selectedServers.Count -gt 0 -and $username -ne "" -and $password -ne "") {
            $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
            $cred = New-Object System.Management.Automation.PSCredential ($username, $securePassword)
            $progressConsole = Show-ProgressConsole

            foreach ($server in $selectedServers) {
                $progressConsole.AppendText("Restarting $server with user $username..." + [System.Environment]::NewLine)
                Restart-Computer -ComputerName $server -Credential $cred -Force -Confirm:$false
                $progressConsole.AppendText("Restart command issued for $server." + [System.Environment]::NewLine)

                # Check if server restarted successfully
                if (Test-ServerRestart -ServerName $server -Credential $cred) {
                    $progressConsole.AppendText("$server has restarted successfully." + [System.Environment]::NewLine)
                } else {
                    $progressConsole.AppendText("Failed to restart $server." + [System.Environment]::NewLine)
                }
            }
            $progressConsole.AppendText("Selected servers are restarting." + [System.Environment]::NewLine)
        } else {
            [System.Windows.Forms.MessageBox]::Show("Please select at least one server and enter your credentials.")
        }
    }
})

# Define the ping button click event
$pingButton.Add_Click({
    $selectedServers = $listBox.SelectedItems
    $progressConsole = Show-ProgressConsole

    foreach ($server in $selectedServers) {
        $pingResult = Ping-Server -ServerName $server
        if ($pingResult) {
            $progressConsole.AppendText("$server is reachable." + [System.Environment]::NewLine)
        } else {
            $progressConsole.AppendText("$server is not reachable." + [System.Environment]::NewLine)
        }
    }
})

# Define the cancel button click event
$cancelButton.Add_Click({
    $form.Close()
})

# Show the form
$form.ShowDialog()
